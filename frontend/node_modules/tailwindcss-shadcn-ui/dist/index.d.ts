import * as tailwindcss_types_config from 'tailwindcss/types/config';
import { Config } from 'tailwindcss';
import { SetOptional } from 'type-fest';

type PluginOptions = {
    theme?: Theme;
};
type Hue = number;
type Saturation = number;
type Lightness = number;
type HexString = `#${string}`;
type HslString = `${Hue} ${Saturation}% ${Lightness}%`;
type HslTuple = [hue: Hue, saturation: Saturation, lightness: Lightness];
type CssColor = HslString | HslTuple | HexString;
type Radius = string | `${number}rem` | number;
type ThemeColors = {
    /**
     * Default backgrounds color of \<body />...etc
     */
    "--background": CssColor;
    /**
     * Default foregrounds color of \<body />...etc
     */
    "--foreground": CssColor;
    /**
     * Muted backgrounds such as \<TabsList />, \<Skeleton /> and \<Switch />
     */
    "--muted": CssColor;
    /**
     * Muted foregrounds such as \<TabsList />, \<Skeleton /> and \<Switch />
     */
    "--muted-foreground": CssColor;
    "--popover": CssColor;
    "--popover-foreground": CssColor;
    "--card": CssColor;
    "--card-foreground": CssColor;
    "--border": CssColor;
    "--input": CssColor;
    "--primary": CssColor;
    "--primary-foreground": CssColor;
    "--secondary": CssColor;
    "--secondary-foreground": CssColor;
    "--accent": CssColor;
    "--accent-foreground": CssColor;
    "--destructive": CssColor;
    "--destructive-foreground": CssColor;
    "--ring": CssColor;
};
type ConvertKey<S extends string> = S extends `--${infer T}-${infer U}` ? `${T}${Capitalize<ConvertKey<U>>}` : S extends `--${infer T}` ? T : S;
type ColorsToCamleCase<T> = T extends object ? {
    [P in keyof T as ConvertKey<P & string>]: T[P];
} : T;
type ThemeConfig = {
    base?: {
        radius?: Radius;
        fontFamily?: string | string[];
    };
    light: ColorsToCamleCase<ThemeColors>;
    dark: ColorsToCamleCase<ThemeColors>;
};
type Theme = {
    /**
     * Default theme
     */
    ":root": ToHslString<ThemeColors> & {
        "--radius": string;
        "--font-sans"?: string;
    };
    /**
     * Dark theme
     */
    ".dark"?: ToHslString<ThemeColors>;
};
type ToHslString<T> = {
    [P in keyof T]: HslString;
};

declare function defineTheme<T extends SetOptional<ThemeConfig, "dark">>(config: T): Theme;

declare function createPreset(options?: PluginOptions): Config;
declare const shadcnPlugin: {
    (options: PluginOptions): {
        handler: tailwindcss_types_config.PluginCreator;
        config?: Partial<Config> | undefined;
    };
    __isOptionsFunction: true;
};

export { ThemeColors as Colors, CssColor as HslValue, PluginOptions, Radius, Theme, ThemeConfig, createPreset, shadcnPlugin as default, defineTheme };
