type Hue = number;
type Saturation = number;
type Lightness = number;
type HexString = `#${string}`;
type HslString = `${Hue} ${Saturation}% ${Lightness}%`;
type HslTuple = [hue: Hue, saturation: Saturation, lightness: Lightness];
type CssColor = HslString | HslTuple | HexString;
type ThemeColors = {
    /**
     * Default backgrounds color of \<body />...etc
     */
    "--background": CssColor;
    /**
     * Default foregrounds color of \<body />...etc
     */
    "--foreground": CssColor;
    /**
     * Muted backgrounds such as \<TabsList />, \<Skeleton /> and \<Switch />
     */
    "--muted": CssColor;
    /**
     * Muted foregrounds such as \<TabsList />, \<Skeleton /> and \<Switch />
     */
    "--muted-foreground": CssColor;
    "--popover": CssColor;
    "--popover-foreground": CssColor;
    "--card": CssColor;
    "--card-foreground": CssColor;
    "--border": CssColor;
    "--input": CssColor;
    "--primary": CssColor;
    "--primary-foreground": CssColor;
    "--secondary": CssColor;
    "--secondary-foreground": CssColor;
    "--accent": CssColor;
    "--accent-foreground": CssColor;
    "--destructive": CssColor;
    "--destructive-foreground": CssColor;
    "--ring": CssColor;
};
type Theme = {
    /**
     * Default theme
     */
    ":root": ToHslString<ThemeColors> & {
        "--radius": string;
        "--font-sans"?: string;
    };
    /**
     * Dark theme
     */
    ".dark"?: ToHslString<ThemeColors>;
};
type ToHslString<T> = {
    [P in keyof T]: HslString;
};

declare const DEFAULT: Theme;

export { DEFAULT };
