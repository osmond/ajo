"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  createPreset: () => createPreset,
  default: () => src_default,
  defineTheme: () => defineTheme
});
module.exports = __toCommonJS(src_exports);
var import_tailwindcss_animate = __toESM(require("tailwindcss-animate"), 1);
var import_defaultTheme = require("tailwindcss/defaultTheme");
var import_plugin = __toESM(require("tailwindcss/plugin"), 1);
var import_themes = require("./themes");

// src/lib/utils.ts
function defineTheme(config) {
  const { base = {}, dark, light } = config;
  return {
    ":root": {
      "--radius": base.radius ? typeof base.radius === "number" ? `${base.radius}px` : base.radius : "0",
      ...base.fontFamily ? { "--font-sans": Array.isArray(base.fontFamily) ? base.fontFamily.join(", ") : base.fontFamily } : {},
      ...toCSSRuleObject(light)
    },
    ...dark ? { ".dark": toCSSRuleObject(dark) } : {}
  };
}
function toCSSRuleObject(colors) {
  return Object.entries(colors).reduce((agg, [key, value]) => {
    let color;
    if (typeof value === "string") {
      if (isHexColor(value)) {
        color = hslToSting(rgbToHsl(value));
      } else if (isHslColor(value)) {
        color = value;
      } else {
        throw new Error(`Invalid color value: ${value}`);
      }
    } else {
      color = `${value[0]} ${value[1]}% ${value[2]}%`;
    }
    agg["--" + key.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`)] = color;
    return agg;
  }, {});
}
function isHexColor(value) {
  return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(value);
}
function isHslColor(value) {
  return /^\d{1,3}\s\d{1,3}%\s\d{1,3}%\)$/.test(value);
}
function hslToSting(value) {
  return `${value[0]} ${value[1]}% ${value[2]}%`;
}
function rgbToHsl(hex) {
  const r = parseInt(hex.substring(1, 3), 16) / 255;
  const g = parseInt(hex.substring(3, 5), 16) / 255;
  const b = parseInt(hex.substring(5, 7), 16) / 255;
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  let h = 0;
  let s = 0;
  let l = (max + min) / 2;
  if (max === min) {
    h = s = 0;
  } else {
    var d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return [h, s * 360, l * 360];
}

// src/index.ts
function createPreset(options = {}) {
  return {
    darkMode: ["class"],
    content: [],
    plugins: [import_tailwindcss_animate.default, shadcnPlugin(options)]
  };
}
var shadcnPlugin = import_plugin.default.withOptions(
  function(options = {}) {
    options.theme ??= import_themes.DEFAULT;
    return function({ addBase }) {
      addBase({
        ...options.theme
      });
      addBase({
        "*": {
          "@apply border-border": {}
        },
        body: {
          "@apply bg-background text-foreground": {},
          "font-feature-settings": `"rlig" 1, "calt" 1`
        }
      });
    };
  },
  function(_options) {
    return {
      theme: {
        container: {
          center: true,
          padding: "2rem",
          screens: {
            "2xl": "1400px"
          }
        },
        extend: {
          fontFamily: {
            sans: ["var(--font-sans)", ...import_defaultTheme.fontFamily.sans]
          },
          colors: {
            border: "hsl(var(--border) / <alpha-value>)",
            input: "hsl(var(--input) / <alpha-value>)",
            ring: "hsl(var(--ring) / <alpha-value>)",
            background: "hsl(var(--background) / <alpha-value>)",
            foreground: "hsl(var(--foreground) / <alpha-value>)",
            primary: {
              DEFAULT: "hsl(var(--primary) / <alpha-value>)",
              foreground: "hsl(var(--primary-foreground) / <alpha-value>)"
            },
            secondary: {
              DEFAULT: "hsl(var(--secondary) / <alpha-value>)",
              foreground: "hsl(var(--secondary-foreground) / <alpha-value>)"
            },
            destructive: {
              DEFAULT: "hsl(var(--destructive) / <alpha-value>)",
              foreground: "hsl(var(--destructive-foreground) / <alpha-value>)"
            },
            muted: {
              DEFAULT: "hsl(var(--muted) / <alpha-value>)",
              foreground: "hsl(var(--muted-foreground) / <alpha-value>)"
            },
            accent: {
              DEFAULT: "hsl(var(--accent) / <alpha-value>)",
              foreground: "hsl(var(--accent-foreground) / <alpha-value>)"
            },
            popover: {
              DEFAULT: "hsl(var(--popover) / <alpha-value>)",
              foreground: "hsl(var(--popover-foreground) / <alpha-value>)"
            },
            card: {
              DEFAULT: "hsl(var(--card) / <alpha-value>)",
              foreground: "hsl(var(--card-foreground) / <alpha-value>)"
            }
          },
          borderRadius: {
            lg: "var(--radius)",
            md: "calc(var(--radius) - 2px)",
            sm: "calc(var(--radius) - 4px)"
          },
          keyframes: {
            "accordion-down": {
              from: { height: "0" },
              to: { height: "var(--radix-accordion-content-height)" }
            },
            "accordion-up": {
              from: { height: "var(--radix-accordion-content-height)" },
              to: { height: "0" }
            }
          },
          animation: {
            "accordion-down": "accordion-down 0.2s ease-out",
            "accordion-up": "accordion-up 0.2s ease-out"
          }
        }
      }
    };
  }
);
var src_default = shadcnPlugin;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createPreset,
  defineTheme
});
